WSTemplateFormatVersion: 2010-09-09

Description: >
  This Cloudformation Template deploys Phonebook Application to five Docker Machines on EC2 Instances \ 
  which are ready for Docker Swarm operations. Docker Machines will run on Amazon Linux 2 with custom \
  security group allowing SSH (22), HTTP (80) UDP (4789, 7946), and TCP(2377, 7946, 8080) connections \ 
  from anywhere. User needs to select appropriate key name when launching the template.


Parameters:
  Keyname:
    Description: Enter Name of your key pair foor ssh connection.
    Type: AWS::EC2::KeyPair::KeyName
    ConstrainDescription: must be one of the existing key pairs.




Resources:
  InstanceConnectionPolicy:
  Type: "AWS::IAM::ManagedPolicy"
  Properties:
    PoliciyDocument: 
    Version: "2012-10-17",
    Statement: 
        - Effect: Allow
          Action: ec2-instance-connect:SendSSHPublicKey
          Resource:
          - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
          Condition:{"StringEquals": {"aws:ResourceTag/project":"203"}}
            # StringEquals:
            #   ec2:osuser: ami-username
        - Effect: Allow
          Action: ec2:DescribeInstances
          Resource: "*"
    EC2InstanceConnect:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Statement: 
            - Effect: Allow
              Principal: 
                Service:
                  - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
    ManagedPolicyArns:
      - !Ref InstanceConnectionPolicy
      - - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
    EC2ConnectProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Roles: #required
          - !Ref EC2InstanceConnect
    DockerMachinesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH and HTTP for Docker Machines
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 2377
            ToPort: 2377
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 7946
            ToPort: 7946
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 7946
            ToPort: 7946
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: 4789
            ToPort: 4789
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0

    ManagerLT:
      Type: "AWS::EC2::LaunchTemplate"
      Properties:
        LaunchTemplateData:
          ImageId: ami-04d29b6f966df1537
          InstanceType: t2.micro
          KeyName: !Ref KeyPairName
          IamInstanceProfile: 
            Arn: !GetAtt EC2ConnectProfile.Arn
          SecurityGroupIds:
            - !GetAtt DockerMachinesSecurityGroup.GroupId
          UserData: 
            Fn::Base64: 
              !Sub |
                #! /bin/bash
                yum update -y
                amazon-linux-extras install docker -y
                systemctl start docker
                systemctl enable docker
                usermod -a -G docker ec2-user
                curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
                yum install python3 -y
                pip3 install ec2instanceconnectcli
                eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
                  --region ${AWS::Region} ${DockerManager1} docker swarm join-token manager | grep -i 'docker')"
                # uninstall aws cli version 1
                rm -rf /bin/aws
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                yum install amazon-ecr-credential-helper -y
                mkdir -p /home/ec2-user/.docker
                cd /home/ec2-user/.docker
                echo '{"credsStore": "ecr-login"}' > config.json
    WorkerLT:
      Type: "AWS::EC2::LaunchTemplate"
      Properties:
        LaunchTemplateData:
          ImageId: ami-04d29b6f966df1537
          InstanceType: t2.micro
          KeyName: !Ref KeyPairName
          IamInstanceProfile: 
            Arn: !GetAtt EC2ConnectProfile.Arn
          SecurityGroupIds:
            - !GetAtt DockerMachinesSecurityGroup.GroupId
          UserData:
            Fn::Base64: 
              !Sub |
                #! /bin/bash
                yum update -y
                amazon-linux-extras install docker -y
                systemctl start docker
                systemctl enable docker
                usermod -a -G docker ec2-user
                curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
                yum install python3 -y
                pip3 install ec2instanceconnectcli
                eval "$(mssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  \
                  --region ${AWS::Region} ${DockerManager1} docker swarm join-token worker | grep -i 'docker')"
                # uninstall aws cli version 1
                rm -rf /bin/aws
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
                yum install amazon-ecr-credential-helper -y
                mkdir -p /home/ec2-user/.docker
                cd /home/ec2-user/.docker
                echo '{"credsStore": "ecr-login"}' > config.json


Outputs:
  

